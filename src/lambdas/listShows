const mysql = require('mysql');
const db_access = require('/opt/nodejs/db_access')


exports.handler = async (event) => {
    // get credentials from the db_access layer (loaded separately via AWS console)
  var pool = mysql.createPool({
      host: db_access.config.host,
      user: db_access.config.user,
      password: db_access.config.password,
      database: db_access.config.database
  });
  
    let validateManager = () => {
        return new Promise((resolve, reject) => {
            if (!event.managerPassword) {
                return reject({
                    statusCode: 400,
                    body: JSON.stringify({ Error: "No manager password provided." })
                });
            }
            pool.query("SELECT managerPassword FROM Venue WHERE managerPassword = ? AND venueName = ?", [event.managerPassword, event.venueName], (error, rows) => {
                if (error) {
                    return reject({
                        statusCode: 500,
                        body: JSON.stringify({ Error: "Database query failed." })
                    });
                }
                if (rows.length === 1) {
                    return resolve(true);
                } else {
                    return reject({
                        statusCode: 400,
                        body: JSON.stringify({ Error: "Incorrect manager password." })
                    });
                }
            });
        });
    };
  
  let ListShows = () => {
      return new Promise((resolve, reject) => {
          pool.query("SELECT showName FROM `Show` WHERE venueName=?;", [event.venueName], (error, rows) => { 
              if (error) { return reject(error); }
              return resolve(rows);
          })
      })
  }
  
  try {
        await validateManager();

        const shows = await ListShows();
        let names = shows.map(v => v.showName);

        return {
            statusCode: 200,
            body: JSON.stringify({ shows: names })
        };
  
    } catch (errorResponse) {
        return {
            statusCode: errorResponse.statusCode || 500,
            body: errorResponse.body || JSON.stringify({ Error: "An error occurred." })
        };
    }
    
};