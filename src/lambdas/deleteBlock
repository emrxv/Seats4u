const mysql = require('mysql');
const db_access = require('/opt/nodejs/db_access');

exports.handler = async (event) => {
    const pool = mysql.createPool({
        host: db_access.config.host,
        user: db_access.config.user,
        password: db_access.config.password,
        database: db_access.config.database
    });
    
    let checkActiveShow = async () => {
        return new Promise((resolve, reject) => {
            if (!event.showName) {
                return reject({
                    statusCode: 400,
                    body: JSON.stringify({ Error: "No show name provided." })
                });
            }
            pool.query("SELECT active FROM Seats4u.Show WHERE showName = ?", [event.showName], (error, results) => {
                if (error) {
                    return reject({
                        statusCode: 500,
                        body: JSON.stringify({ Error: "Database query failed." })
                    });
                }
                if (results.length === 0) {
                    return reject({
                        statusCode: 400,
                        body: JSON.stringify({ Error: "Show not found." })
                    });
                }
                if(results[0].active === 1) {
                    return reject({
                        statusCode: 400,
                        body: JSON.stringify({ Error: "Show is active; cannot delete block." })
                    });
                }
                return resolve(true);
            });
        });
    };
  
    
        let validateManager = async () => {
        return new Promise((resolve, reject) => {
            if (!event.managerPassword) {
                return reject({
                    statusCode: 400,
                    body: JSON.stringify({ Error: "No manager password provided." })
                });
            }
            
        pool.query("SELECT Seats4u.Venue.managerPassword FROM Seats4u.Show JOIN Seats4u.Venue ON Seats4u.Show.venueName = Seats4u.Venue.venueName WHERE Seats4u.Show.showName = ? AND Seats4u.Venue.managerPassword = ?", [event.showName, event.managerPassword], (error, rows) => {
                if (error) {
                    return reject({
                        statusCode: 500,
                        body: JSON.stringify({ Error: "Database query failed." })
                    });
                }
                if (rows.length === 1) {
                    return resolve(true);
                } else {
                    return reject({
                        statusCode: 400,
                        body: JSON.stringify({ Error: "Incorrect manager password." })
                    });
                }
            });
        });
    };
  
    
    let DeleteBlock = async () => {
        return new Promise((resolve, reject) => {
            pool.query("DELETE Seats4u.Block FROM Seats4u.Block WHERE Seats4u.Block.blockName=?;", [event.blockName], (error, rows) => {
                if (error) {
                    console.error('Error executing query:', error); // Log the error
                    return reject(error);
                }
                return resolve(rows);
            });
        });
    };
    
    try {
        await checkActiveShow();
        await validateManager();
        const result = await DeleteBlock();
        const response = {
            statusCode: 200,
            result
        };
        return response;
    } catch (error) {
        // Handle errors that occur during the delete operation
        return {
            error
        };
    }
};
