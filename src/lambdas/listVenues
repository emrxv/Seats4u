const mysql = require('mysql');
const db_access = require('/opt/nodejs/db_access');

exports.handler = async (event) => {
    var pool = mysql.createPool({
        host: db_access.config.host,
        user: db_access.config.user,
        password: db_access.config.password,
        database: db_access.config.database
    });

    let validateAdmin = () => {
        return new Promise((resolve, reject) => {
            if (!event.adminPassword) {
                return reject({
                    statusCode: 400,
                    body: JSON.stringify({ Error: "No admin password provided." })
                });
            }
            
            pool.query("SELECT adminPassword FROM Admin WHERE adminPassword = ?", [event.adminPassword], (error, rows) => {
                if (error) {
                    return reject({
                        statusCode: 500,
                        body: JSON.stringify({ Error: "Database query failed." })
                    });
                }
                if (rows.length === 1) {
                    return resolve(true);
                } else {
                    return reject({
                        statusCode: 400,
                        body: JSON.stringify({ Error: "Incorrect admin password." })
                    });
                }
            });
        });
    };

let listVenuesAndShows = () => {
    return new Promise((resolve, reject) => {
        // Updated query to perform a JOIN operation and fetch venueName and showName
        let query = `SELECT Seats4u.Venue.venueName, Seats4u.Show.showName 
                     FROM Seats4u.Venue 
                     JOIN Seats4u.Show ON Seats4u.Venue.venueName = Seats4u.Show.venueName`;

        pool.query(query, [], (error, rows) => {
            if (error) {
                return reject({
                    statusCode: 500,
                    body: JSON.stringify({ Error: "Database query failed." })
                });
            }
            return resolve(rows);  
        });
    });
};

try {
    await validateAdmin();

    // Updated function call to listVenuesAndShows
    const venuesAndShows = await listVenuesAndShows();
    
    // Processing the data to group shows by venue
    let result = venuesAndShows.reduce((acc, { venueName, showName }) => {
        acc[venueName] = acc[venueName] || [];
        acc[venueName].push(showName);
        return acc;
    }, {});

    return {
        statusCode: 200,
        body: JSON.stringify(result)
    };
} catch (errorResponse) {
    return {
        statusCode: errorResponse.statusCode || 500,
        body: errorResponse.body || JSON.stringify({ Error: "An error occurred." })
    };
}

};
