const mysql = require('mysql');
const db_access = require('/opt/nodejs/db_access');

exports.handler = async (event) => {
    var pool = mysql.createPool({
        host: db_access.config.host,
        user: db_access.config.user,
        password: db_access.config.password,
        database: db_access.config.database
    });
    
    let validateManager = () => {
      return new Promise((resolve, reject) => {
        if (!event.managerPassword) {
          return reject({
            statusCode: 400,
            body: JSON.stringify({ Error: "No manager password provided." })
          });
        }
            pool.query("SELECT Seats4u.Venue.managerPassword FROM Seats4u.Show JOIN Seats4u.Venue ON Seats4u.Show.venueName = Seats4u.Venue.venueName WHERE Seats4u.Show.showName = ? AND Seats4u.Venue.managerPassword = ?", [event.showName, event.managerPassword], (error, rows) => {
                    if (error) {
                        return reject({
                            statusCode: 500,
                            body: JSON.stringify({ Error: "Database query failed." })
                        });
                    }
                    if (rows.length > 0) {
                        return resolve(true);
                    } else {
                        return reject({
                            statusCode: 400,
                            body: JSON.stringify({ Error: "Incorrect manager password." })
                        });
                    }
                });
            });
      };
    
    
    let checkActiveShow = () => {
        return new Promise((resolve, reject) => {
            pool.query("SELECT * FROM Seats4u.Show WHERE active = 1 AND Seats4u.Show.showName = ?", [event.showName], (error, rows) => {
                if (error) {
                    return reject({
                        statusCode: 500,
                        body: JSON.stringify({ message: error.message })
                    });
                }
                if (rows > 0) {
                    return reject({
                        statusCode: 400,
                        body: JSON.stringify({ Error: "Show is active so seats cannot be deleted." })
                    });
                }
                resolve();
            });
        });
    };
  
    let DeleteSeats_rem = () => {
       return new Promise((resolve, reject) => {
           pool.query("DELETE FROM Seats4u.showSeatsRemaining WHERE Seats4u.showSeatsRemaining.showName=?;", [event.showName], (error, rows) => { 
              if (error) { return reject(error); }
              return resolve(true);
           })
       })
    }
  
    let DeleteSeats_sold = () => {
      return new Promise((resolve, reject) => {
          pool.query("DELETE FROM Seats4u.soldSeats WHERE Seats4u.soldSeats.showName=?;", [event.showName], (error, rows) => { 
              if (error) { return reject(error); }
              return resolve(true); // technically we could have an error message here 
          })
        })
    }

    try {
        await validateManager();
        await checkActiveShow();
        await DeleteSeats_rem();
        await DeleteSeats_sold();
        
        return {
            statusCode: 200,
            body: JSON.stringify({ message: 'Corresponding show seats deleted successfully.' })
        };
    } catch (errorResponse) {
        // Return the error response from the rejected promise
        return {
            statusCode: errorResponse.statusCode,
            body: errorResponse.body
        };
    }
};